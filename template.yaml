AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default:
            Which pattern are we deploying? The app with secrets, the app but
            using existing secrets, or just the secrets.
        Parameters:
          - DeployPattern
      - Label:
          default: AWS IAM Identity Center (Successor to AWS Single Sign-On)
        Parameters:
          - SCIMEndpointUrl
          - SCIMEndpointAccessToken
          - Region
          - IdentityStoreID
      - Label:
          default: Google Workspace Credentials
        Parameters:
          - GoogleAdminEmail
          - GoogleCredentials
      - Label:
          default: Sync Configuration
        Parameters:
          - SyncMethod
          - GoogleUserMatch
          - GoogleGroupMatch
          - IgnoreUsers
          - IgnoreGroups
      - Label:
          default: "Configuration options for users_groups Mode only"
        Parameters:
          - IncludeGroups
      - Label:
          default: "Lambda Configuration"
        Parameters:
          - FunctionName
          - LogLevel
          - LogFormat
          - TimeOut
          - ScheduleExpression

  AWS::ServerlessRepo::Application:
    Name: ssosync
    Description:
      Helping you populate AWS SSO directly with your Google Apps users.
    Author: Sebastian Doell
    SpdxLicenseId: Apache-2.0
    # paths are relative to .aws-sam/build directory
    LicenseUrl: LICENSE
    ReadmeUrl: SAR.md
    Labels: [serverless, sso, lambda, scim]
    HomePageUrl: https://github.com/awslabs/ssosync
    # Update the semantic version and run sam publish to publish a new version of your app
    SemanticVersion: v2.0.2
    # best practice is to use git tags for each release and link to the version tag as your source code URL
    SourceCodeUrl: https://github.com/awslabs/ssosync/tree/v2.0.2

Parameters:
  DeployPattern:
    Type: String
    Description: |
      App + secrets (default); you provide the values for the secrets and the everything is setup.
      App only; Deploys the app and to use the secrets you provide the arn for, that exist in this account.
      App for cross-account; Deploys the app and to use the secrets you provide the arn for, also requires details of the KMS key used to encrypt them.
      Secrets only; Just creates the secrets.
      Secrets for cross-account; Just creates the secrets, and encrypts them with a KMS key and share them with the target account.
    Default: App + secrets
    AllowedValues:
      - App + secrets
      - App only
      - App for cross-account
      - Secrets only
      - Secrets for cross-account

  CrossStackConfig:
    Type: String
    Description: |
      [App for cross-account] this is the AppConfig from the ouputs of the Secrets for cross-account stack.
      [Secrets for cross-account] this is the AWS account id into which you will be deplying the SSOSync app?
    Default: ""
    AllowedPattern: '(?!.*\s)|(\d{12})|(arn:aws:secretsmanager:((us(-gov)?|ap|ca|cn|eu|sa)-(central|(north|south)?(east|west)?)-\d):[0-9]{8,12}:secret:[a-zA-Z0-9/_+=.@-]{1,512})(,arn:aws:secretsmanager:((us(-gov)?|ap|ca|cn|eu|sa)-(central|(north|south)?(east|west)?)-\d):[0-9]{8,12}:secret:[a-zA-Z0-9/_+=.@-]{1,512}){5}(,arn:aws:kms:((us(-gov)?|ap|ca|cn|eu|sa)-(central|(north|south)?(east|west)?)-\d):[0-9]{12}:key/[a-zA-Z0-9/_+=.@-]{1,512})?'

  FunctionName:
    Type: String
    Description: |
      [optional] Specify the name you want to us for this deployment, if you want to trigger SSOSync as part of a pipeline or other automation this will ensure a consistent arn to call. leave empty for default behaviour.
    Default: ""
    AllowedPattern: '(?!.*\s)|[a-zA-Z0-9-_]{1,140}'

  ScheduleExpression:
    Type: String
    Description: |
      [optional] Schedule for trigger the execution of ssosync (see CloudWatch schedule expressions), leave empty if you want to trigger execution by another method such as AWS CodePipeline.
    Default: rate(15 minutes)
    AllowedPattern:
      '(?!.*\s)|rate\(\d{1,3}
      (minutes|hours|days)\)|(cron\((([0-9]|[1-5][0-9]|60)|\d\/([0-9]|[1-5][0-9]|60)|\*)
      (([0-9]|[1][0-9]|[2][0-3])|(\d\/([0-9]|[1][0-9]|[2][0-3]))|(([0-9]|[1][0-9]|[2][0-3])-([0-9]|[1][0-9]|[2][0-3]))|\*)
      (([1-9]|[1-2][0-9]|[3][0-1])|\d\/([1-9]|[1-2][0-9]|[3][0-1])|[1-5]W|L|\*|\?)
      (([1-9]|[1][1-2])|(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)|((JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV)-(FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC))|(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV)(,(FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)){0,11}|\d\/([0-9]|[1][0-2])|\?|\*)
      ((MON|TUE|WED|THU|FRI|SAT|SUN)|(MON|TUE|WED|THU|FRI|SAT)-(TUE|WED|THU|FRI|SAT|SUN)|(MON|TUE|WED|THU|FRI|SAT)(,(TUE|WED|THU|FRI|SAT|SUN)){0,6}|[1-7]L|[1-7]#[1-5]|\?|\*)
      ((19[7-9][0-9]|2[0-1]\d\d)|(19[7-9][0-9]|2[0-1]\d\d)-(19[7-9][0-9]|2[0-1]\d\d)|(19[7-9][0-9]|2[0-1]\d\d)(,(19[7-9][0-9]|2[0-1]\d\d))*|\*)\))'

  LogLevel:
    Type: String
    Description: Log level for Lambda function logging
    Default: info
    AllowedValues:
      - panic
      - fatal
      - error
      - warn
      - info
      - debug
      - trace

  LogFormat:
    Type: String
    Description: Log format for Lambda function logging
    Default: text
    AllowedValues:
      - json
      - text

  TimeOut:
    Type: Number
    Description: |
      [required] Timeout for the Lambda function
    Default: 300
    MinValue: 1
    MaxValue: 900

  # Secrets
  GoogleCredentials:
    Type: String
    Description: |
      Credentials to log into Google (content of credentials.json)
    Default: ""
    AllowedPattern: '(?!.*\s)|(\{(\s)*(".*")(\s)*:(\s)*(".*")(\s)*\})'
    NoEcho: true

  GoogleAdminEmail:
    Type: String
    Description: |
      Google Admin email
    Default: ""
    AllowedPattern: '(?!.*\s)|(([a-zA-Z0-9.+=_-]{0,61})@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)'
    NoEcho: true

  SCIMEndpointUrl:
    Type: String
    Description: |
      AWS IAM Identity Center - SCIM Endpoint Url
    Default: ""
    AllowedPattern: '(?!.*\s)|(https://scim.(us(-gov)?|ap|ca|cn|eu|sa)-(central|(north|south)?(east|west)?)-([0-9]{1}).amazonaws.com/(.*)-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12})/scim/v2/)'

  SCIMEndpointAccessToken:
    Type: String
    Description: |
      AWS IAM Identity Center - SCIM AccessToken
    Default: ""
    AllowedPattern: '(?!.*\s)|([0-9a-zA-Z/=+-\\]{500,620})'
    NoEcho: true

  Region:
    Type: String
    Description: |
      AWS Region where AWS IAM Identity Center is enabled
    Default: ""
    AllowedPattern: '(?!.*\s)|(us(-gov)?|ap|ca|cn|eu|sa)-(central|(north|south)?(east|west)?)-\d'

  IdentityStoreID:
    Type: String
    Description: |
      Identifier of Identity Store in AWS IAM Identity Center
    Default: ""
    AllowedPattern: '(?!.*\s)|d-[1-z0-9]{10}'

  GoogleUserMatch:
    Type: String
    Description: |
      [optional] Google Workspace Users filter query parameter, a simple '*' denotes sync all users in the directory. example: 'name:John*,email:admin*', '*' or name=John Doe,email:admin*' see: https://developers.google.com/admin-sdk/directory/v1/guides/search-users, if left empty no users will be selected but if a pattern has been set for GroupMatch users that are members of the groups it matches will still be selected.
    Default: ""
    AllowedPattern:
      '(?!.*\s)|(\*)|((((name|Name|NAME)((:[a-zA-Z0-9\-
      ]{1,64}\*)|(=[a-zA-Z0-9\-
      ]{1,64})))|((email|Email|EMAIL)((:[a-zA-Z0-9.\-_]{1,64}\*)|(=([a-zA-Z0-9.\-_]{1,64})@([a-zA-Z0-9.\-]{5,260})))))(,(((name|Name|NAME)((:[a-zA-Z0-9\-
      ]{1,64}\*)|(=[a-zA-Z0-9\-
      ]{1,64})))|((email|Email|EMAIL)((:[a-zA-Z0-9.\-_]{1,64}\*)|(=([a-zA-Z0-9.\-_]{1,64})@([a-zA-Z0-9.\-]{5,260}))))))*)'

  GoogleGroupMatch:
    Type: String
    Description: |
      [optional] Google Workspace Groups filter query parameter, a simple '*' denotes sync all groups (and any users that are members of those groups). example: 'name:Admin*,email:aws-*', 'name=Admins' or '*' see: https://developers.google.com/admin-sdk/directory/v1/guides/search-groups, if left empty no groups will be selected.
    Default: "*"
    AllowedPattern:
      '(?!.*\s)|(\*)|((((name|Name|NAME)((:[a-zA-Z0-9\-
      ]{1,64}\*)|(=[a-zA-Z0-9\-
      ]{1,64})))|((email|Email|EMAIL)((:[a-zA-Z0-9.\-_]{1,64}\*)|(=([a-zA-Z0-9.\-_]{1,64})@([a-zA-Z0-9.\-]{5,260})))))(,(((name|Name|NAME)((:[a-zA-Z0-9\-
      ]{1,64}\*)|(=[a-zA-Z0-9\-
      ]{1,64})))|((email|Email|EMAIL)((:[a-zA-Z0-9.\-_]{1,64}\*)|(=([a-zA-Z0-9.\-_]{1,64})@([a-zA-Z0-9.\-]{5,260}))))))*)'

  IgnoreGroups:
    Type: String
    Description: |
      [optional] Ignore these Google Workspace groups, leave empty if not required
    Default: ""
    AllowedPattern: '(?!.*\s)|((([a-zA-Z0-9.\-_]{1,64})@([a-zA-Z0-9.\-]{5,260}))(,(([a-zA-Z0-9.\-_]{1,64})@([a-zA-Z0-9.\-]{5,260})))*)'

  IgnoreUsers:
    Type: String
    Description: |
      [optional] Ignore these Google Workspace users, leave empty if not required
    Default: ""
    AllowedPattern: '(?!.*\s)|((([a-zA-Z0-9.\-_]{1,64})@([a-zA-Z0-9.\-]{5,260}))(,(([a-zA-Z0-9.\-_]{1,64})@([a-zA-Z0-9.\-]{5,260})))*)'

  IncludeGroups:
    Type: String
    Description: |
      [optional] Include only these Google Workspace groups, leave empty if not required. (Only applicable for SyncMethod user_groups)
    Default: ""
    AllowedPattern: '(?!.*\s)|((([a-zA-Z0-9.\-_]{1,64})@([a-zA-Z0-9.\-]{5,260}))(,(([a-zA-Z0-9.\-_]{1,64})@([a-zA-Z0-9.\-]{5,260})))*)'

  SyncMethod:
    Type: String
    Description: Sync method to use
    Default: groups
    AllowedValues:
      - groups
      - users_groups

Resources:
  SSOSyncV2Function:
    Type: AWS::Serverless::Function
    Condition: CreateFunction
    Properties:
      Runtime: provided.al2
      Handler: dist/ssosync_linux_amd64_v1/ssosync
      Timeout: 900
      Environment:
        Variables:
          SSOSYNC_LOG_LEVEL: !Ref LogLevel
          SSOSYNC_LOG_FORMAT: !Ref LogFormat
          SSOSYNC_GOOGLE_CREDENTIALS: !Ref AWSGoogleCredentialsSecret
          SSOSYNC_GOOGLE_ADMIN: !Ref AWSGoogleAdminEmail
          SSOSYNC_SCIM_ENDPOINT: !Ref AWSSCIMEndpointSecret
          SSOSYNC_SCIM_ACCESS_TOKEN: !Ref AWSSCIMAccessTokenSecret
          SSOSYNC_REGION: !Ref AWSRegionSecret
          SSOSYNC_IDENTITY_STORE_ID: !Ref AWSIdentityStoreIDSecret
          SSOSYNC_USER_MATCH: !Ref GoogleUserMatch
          SSOSYNC_GROUP_MATCH: !Ref GoogleGroupMatch
          SSOSYNC_SYNC_METHOD: !Ref SyncMethod
          SSOSYNC_IGNORE_GROUPS: !Ref IgnoreGroups
          SSOSYNC_IGNORE_USERS: !Ref IgnoreUsers
          SSOSYNC_INCLUDE_GROUPS: !Ref IncludeGroups
      Policies:
        - Statement:
            - Sid: SSMGetParameterPolicy
              Effect: Allow
              Action:
                - "secretsmanager:Get*"
              Resource:
                - !Ref AWSGoogleCredentialsSecret
                - !Ref AWSGoogleAdminEmail
                - !Ref AWSSCIMEndpointSecret
                - !Ref AWSSCIMAccessTokenSecret
                - !Ref AWSRegionSecret
                - !Ref AWSIdentityStoreIDSecret
        - Version: "2012-10-17"
          Statement:
            - Sid: IdentityStoreAccesPolicy
              Effect: Allow
              Action:
                - "identitystore:DeleteUser"
                - "identitystore:CreateGroup"
                - "identitystore:CreateGroupMembership"
                - "identitystore:ListGroups"
                - "identitystore:ListUsers"
                - "identitystore:ListGroupMemberships"
                - "identitystore:IsMemberInGroups"
                - "identitystore:GetGroupMembershipId"
                - "identitystore:DeleteGroupMembership"
                - "identitystore:DeleteGroup"
              Resource:
                - "*"
      Events:
        SyncScheduledEvent:
          Type: Schedule
          Name: AWSSyncSchedule
          Properties:
            Enabled: !If [OnSchedule, false, true]
            Schedule:
              !If [OnSchedule, !Ref ScheduleExpression, "rate(15 minutes)"]

  KeyAlias:
    Type: AWS::KMS::Alias
    Condition: CreateKey
    Properties:
      AliasName: alias/SSOSync
      TargetKeyId: !Ref KeyForSecrets

  KeyForSecrets:
    Type: AWS::KMS::Key
    Condition: CreateKey
    Properties:
      Description:
        Key for protecting SSOSync Secrets in cross-account deployment
      Enabled: true
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT
      MultiRegion: false
      PendingWindowInDays: 7
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: "kms:*"
            Resource: "*"
          - Sid: AppRole in Other account
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${CrossStackConfig}:root
            Action:
              - kms:Decrypt
              - kms:DescribeKey
            Resource: "*"

  SecretGoogleCredentials:
    Type: "AWS::SecretsManager::Secret"
    Condition: CreateSecrets
    Properties:
      Name: SSOSyncV2GoogleCredentials
      SecretString: !Ref GoogleCredentials
      KmsKeyId: !If [CreateKey, !Ref KeyAlias, alias/aws/secretsmanager]

  SecretGoogleCredentialsPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Condition: CreateKey
    Properties:
      SecretId: !Ref SecretGoogleCredentials
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${CrossStackConfig}:root
            Action:
              - secretsmanager:GetSecretValue
            Resource: "*"

  SecretGoogleAdminEmail:
    Type: "AWS::SecretsManager::Secret"
    Condition: CreateSecrets
    Properties:
      Name: SSOSyncV2GoogleAdminEmail
      SecretString: !Ref GoogleAdminEmail
      KmsKeyId: !If [CreateKey, !Ref KeyAlias, alias/aws/secretsmanager]

  SecretGoogleAdminEmailPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Condition: CreateKey
    Properties:
      SecretId: !Ref SecretGoogleAdminEmail
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${CrossStackConfig}:root
            Action:
              - secretsmanager:GetSecretValue
            Resource: "*"

  SecretSCIMEndpoint: # This can be moved to custom provider
    Type: "AWS::SecretsManager::Secret"
    Condition: CreateSecrets
    Properties:
      Name: SSOSyncV2SCIMEndpointUrl
      SecretString: !Ref SCIMEndpointUrl
      KmsKeyId: !If [CreateKey, !Ref KeyAlias, alias/aws/secretsmanager]

  SecretSCIMEndpointPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Condition: CreateKey
    Properties:
      SecretId: !Ref SecretSCIMEndpoint
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${CrossStackConfig}:root
            Action:
              - secretsmanager:GetSecretValue
            Resource: "*"

  SecretSCIMAccessToken: # This can be moved to custom provider
    Type: "AWS::SecretsManager::Secret"
    Condition: CreateSecrets
    Properties:
      Name: SSOSyncV2SCIMAccessToken
      SecretString: !Ref SCIMEndpointAccessToken
      KmsKeyId: !If [CreateKey, !Ref KeyAlias, alias/aws/secretsmanager]

  SecretSCIMAccessTokenPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Condition: CreateKey
    Properties:
      SecretId: !Ref SecretSCIMAccessToken
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${CrossStackConfig}:root
            Action:
              - secretsmanager:GetSecretValue
            Resource: "*"

  SecretRegion:
    Type: "AWS::SecretsManager::Secret"
    Condition: CreateSecrets
    Properties:
      Name: SSOSyncV2Region
      SecretString: !Ref Region
      KmsKeyId: !If [CreateKey, !Ref KeyAlias, alias/aws/secretsmanager]

  SecretRegionPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Condition: CreateKey
    Properties:
      SecretId: !Ref SecretRegion
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${CrossStackConfig}:root
            Action:
              - secretsmanager:GetSecretValue
            Resource: "*"

  SecretIdentityStoreID:
    Type: "AWS::SecretsManager::Secret"
    Condition: CreateSecrets
    Properties:
      Name: SSOSyncV2IdentityStoreID
      SecretString: !Ref IdentityStoreID
      KmsKeyId: !If [CreateKey, !Ref KeyAlias, alias/aws/secretsmanager]

  SecretIdentityStoreIDPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Condition: CreateKey
    Properties:
      SecretId: !Ref SecretIdentityStoreID
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${CrossStackConfig}:root
            Action:
              - secretsmanager:GetSecretValue
            Resource: "*"

Outputs:
  FunctionArn:
    Condition: OutputFunction
    Description: "The Arn of the deployed lambda function"
    Value: !GetAtt SSOSyncFunction.Arn
    Export:
      Name: FunctionARN

  AppConfigLocal:
    Condition: OutputSecrets
    Description:
      "The Comma Separated list of secrets ARNs to copy and paste into the
      CrossStackConfig field of the App only stack."
    Value: !Sub ${SecretGoogleCredentials},${SecretGoogleAdminEmail},${SecretSCIMEndpoint},${SecretSCIMAccessToken},${SecretRegion},${SecretIdentityStoreID}
    Export:
      Name: AppConfig

  AppConfigRemote:
    Condition: CreateKey
    Description:
      "The Comma Separated list of Secrets and KMS Key ARNs to copy and paste
      into the CrossStackConfig field of the app for cross-account stack."
    Value: !Sub ${SecretGoogleCredentials},${SecretGoogleAdminEmail},${SecretSCIMEndpoint},${SecretSCIMAccessToken},${SecretRegion},${SecretIdentityStoreID},arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KeyForSecrets}
    Export:
      Name: AppConfig
