version: 0.2
            
env:
  variables:
    GO_VERSION: "1.17.5"
phases:
  install: 
    commands:
      - wget https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz
      - tar -C / -xzf go${GO_VERSION}.linux-amd64.tar.gz
      - export PATH="/go/bin:$PATH" && export GOPATH="/go" && export PATH="$GOPATH/bin:$PATH"

      # AWS Codebuild Go images use /go for the $GOPATH so let's symlink our
      # application source code into that directory structure.
      - ln -s "${CODEBUILD_SRC_DIR}" "/go/src/handler"

      # Install golint
      - go install golang.org/x/lint/golint@latest
      #- go get -u github.com/golang/lint/golint

      # Install staticcheck
      - go install honnef.co/go/tools/cmd/staticcheck@latest

      # Install Testify to use common assertions and mocks in tests
      - go get -u github.com/stretchr/testify

  pre_build: 
    commands:
      - echo "Start pre_build..."

      # Make sure we're in the project directory within our GOPATH
      - cd "/go/src/handler"

      # Fetch all dependencies
      - go env -w GOPROXY=direct
      - go get ./...

      # Run staticcheck
      - staticcheck ./...

      # Ensure code passes all lint tests
      #- golint -set_exit_status ./...

      # Check the Go code for common problems with 'go vet'
      - go vet .

      # Run all tests included with our application
      - go test .

  build:
    commands:
      - echo "Start build..."
      # Build our go application
      - go build -o ssosync main.go

      # Package our application with AWS SAM
      - aws cloudformation package --template template.yml --s3-bucket $S3_BUCKET --output-template packaged.yml

artifacts:
  files:
    - ssosync
    - buildspec.yml
    - packaged.yml
