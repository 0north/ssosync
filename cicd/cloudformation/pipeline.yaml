AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: 
  This CloudFormation template will deploy a full CI/CD pipeline for SSO
  Sync. It includes building with AWS CodeBuild, publishing to a
  staging (private) AWS Serverless Application Repository (SAR), deployment
  of the beta into a staging environment via AWS CloudFormation. If the commit
  is also a release, then the app will also be published to the public SAR entry.

Parameters:
  ApplicationName: 
    Description: This will be used to name the pipeline and build resources
    Default: SSOSync
    Type: String
    AllowedPattern: '[A-Za-z0-9-]+'
  StagingBuildAllowedAccounts:
    Description: The AWS Account Id(s) with which to share the staging build (comma delimited)
    Type: String
    AllowedPattern: '[0-9,]+'
  IntegrationTestAccount:
    Description: AWS Account where staging build is automatically deployed and tested
    Type: String
    AllowedPattern: '[0-9]+'
  GoogleCredentials:
    Description: Credentials to log into Google (content of credentials.json)
    Type: String
    NoEcho: true
  GoogleAdminEmail:
    Description: Google Admin email
    Type: String
    NoEcho: true
  SCIMEndpointUrl:
    Description: AWS SSO SCIM Endpoint Url
    Type: String
    NoEcho: true
  SCIMEndpointAccessToken:
    Description: AWS SSO SCIM AccessToken
    Type: String
    NoEcho: true  

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          default: Application Configuration
        Parameters:
          - ApplicationName
      - Label:
          default: Details of Staging and Test environments
        Parameters:
          - StagingBuildAllowedAccounts
      - Label:
          default: End 2 End Test environment
        Parameters:
          - IntegrationTestAccount
          - GoogleCredentials
          - GoogleAdminEmail
          - SCIMEndpointUrl
          - SCIMEndpointAccessToken
            
    ParameterLabels:
      ApplicationName: 
        default: "SSOSync"
      StagingBuildAllowedAccounts:
        default: "111111111111,2222222222222,33333333333"
      IntegrationTestAccount:
        default: "123456789012"
      GoogleCredentials:
        default: "contents of credentials.json"
      GoogleAdminEmail:
        default: "admin@WorkspaceDomain"
      SCIMEndpointUrl:
        default: "https://scim.<region>.amazonaws.com/<instance id>/scim/v2/"
      SCIMEndpointAccessToken:
        default: "AWS SSO SCIM Access Token"

Resources:
  
  GoogleCredentialSecret:
    Type: "AWS::SecretsManager::Secret"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete
    Properties:
      Name: E2ETestGoogleCredentials
      SecretString: !Ref GoogleCredentials
      Tags:
        - Key: Application
          Value: !Ref ApplicationName

  GoogleAdminEmailSecret:
    Type: "AWS::SecretsManager::Secret"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete
    Properties:
      Name: E2ETestGoogleAdminEmail
      SecretString: !Ref GoogleAdminEmail
      Tags:
        - Key: Application
          Value: !Ref ApplicationName

  SSoSCIMUrlSecret: # This can be moved to custom provider
    Type: "AWS::SecretsManager::Secret"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete
    Properties:
      Name: E2ETestSCIMEndpointUrl
      SecretString: !Ref SCIMEndpointUrl
      Tags:
        - Key: Application
          Value: !Ref ApplicationName

  SSoSSCIMAccessTokenSecret: # This can be moved to custom provider
    Type: "AWS::SecretsManager::Secret"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete
    Properties:
      Name: E2ETestSCIMAccessToken
      SecretString: !Ref SCIMEndpointAccessToken
      Tags:
        - Key: Application
          Value: !Ref ApplicationName

  SARPublishApp:
    Type: AWS::Serverless::Application
    UpdateReplacePolicy: Delete
    Properties:
      Location:
        ApplicationId: 'arn:aws:serverlessrepo:us-east-1:077246666028:applications/aws-serverless-codepipeline-serverlessrepo-publish'
        SemanticVersion: 1.0.0

  CodePipelineArtifactS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete

  CodePipelineArtifactS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CodePipelineArtifactS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: ['s3:GetObject']
          Effect: Allow
          Principal:
            Service: 'serverlessrepo.amazonaws.com'
          Resource:
          - !Sub ${StagingS3Bucket.Arn}/*
          Condition: 
            StringEquals: 
              aws:SourceAccount: !Ref AWS::AccountId
        - Sid: DenyUnEncryptedObjectUploads
          Effect: Deny
          Principal: "*"
          Action: s3:PutObject
          Resource: !Sub ${CodePipelineArtifactS3Bucket.Arn}/*
          Condition: 
            StringNotEquals: 
              s3:x-amz-server-side-encryption: aws:kms
        - Sid: DenyInsecureConnections
          Effect: Deny
          Principal: "*"
          Action: "s3:*"
          Resource: !Sub ${CodePipelineArtifactS3Bucket.Arn}/*
          Condition: 
            Bool: 
              aws:SecureTransport: false

  StagingS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete

  StagingS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StagingS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: ['s3:GetObject']
          Effect: Allow
          Principal:
            Service: 'serverlessrepo.amazonaws.com'
          Resource: !Sub ${StagingS3Bucket.Arn}/*
          Condition:  
            StringEquals:  
              aws:SourceAccount: !Ref AWS::AccountId

  ReleaseS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete

  ReleaseS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ReleaseS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: ['s3:GetObject']
          Effect: Allow
          Principal:
            Service: 'serverlessrepo.amazonaws.com'
          Resource: 
          - !Sub ${ReleaseS3Bucket.Arn}/*
          Condition:  
            StringEquals:  
              aws:SourceAccount: !Ref AWS::AccountId

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref ApplicationName
      RoleArn: !Sub ${CodePipelineRole.Arn}
      ArtifactStore: 
        Type: S3
        Location: !Ref CodePipelineArtifactS3Bucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              OutputArtifacts:
                - Name: 1-Source
              Configuration:
                ConnectionArn: arn:aws:codestar-connections:us-east-2:004480582608:connection/0a1c90d5-1395-4a3b-8734-2b53cda9fad2
                FullRepositoryId: awslabs/ssosync
                BranchName: CodePipeline
                DetectChanges: true
        - Name: Build
          Actions:
            - Name: BuildGo
              InputArtifacts:
                - Name: 1-Source
              ActionTypeId: 
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: 2-Build
              Configuration: 
                ProjectName: !Ref CodeBuildGo
        - Name: PackageStaging
          Actions:
            - Name: PackageStaging
              InputArtifacts:
                - Name: 2-Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: 3-Staging
              Configuration:
                ProjectName: !Ref CodeBuildStaging
        - Name: PublishStaging
          Actions:
            - Name: PublishStagingToSAR
              InputArtifacts:
                - Name: 3-Staging
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              Configuration:
                FunctionName: !GetAtt SARPublishApp.Outputs.ServerlessRepoPublishFunctionName
        - Name: Approvals
          Actions:
            - Name: ProductionGate
              ActionTypeId: 
                Category: Approval
                Owner: AWS
                Version: 1
                Provider: Manual  
        - Name: PackageRelease
          Actions:
            - Name: PackageRelease
              InputArtifacts:
                - Name: 2-Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: 4-Release
              Configuration:
                ProjectName: !Ref CodeBuildRelease
        - Name: PublishRelease
          Actions:
            - Name: PublishReleaseToSAR
              InputArtifacts:
                - Name: 4-Release
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              Configuration:
                FunctionName: !GetAtt SARPublishApp.Outputs.ServerlessRepoPublishFunctionName

  CodeBuildGo:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${ApplicationName}-Build-go"
      Description: !Sub Build project for ${ApplicationName}
      ServiceRole: !Ref CodeBuildGoRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: "cicd/build/buildgo.yml"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: ARTIFACT_S3_BUCKET
            Value: !Sub ${CodePipelineArtifactS3Bucket}
          - Name: GO_VERSION
            Value: "1.18.1"
          - Name: OUTPUT
            Value: main
          - Name: APP_NAME
            Value: ssosync
      Artifacts:
        Name: !Ref ApplicationName
        Type: CODEPIPELINE

  CodeBuildStaging:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${ApplicationName}-Package-Staging"
      Description: !Sub SAM package for ${ApplicationName}
      ServiceRole: !Ref CodeBuildStagingRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: "cicd/package/staging.yml"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: ARTIFACT_S3_BUCKET
            Value: !Sub ${CodePipelineArtifactS3Bucket}
          - Name: S3Bucket
            Value: !Ref StagingS3Bucket
          - Name: Template
            Value: template.yaml 
          - Name: Packaged
            Value: packaged.yaml 
      Artifacts:
        Name: !Ref ApplicationName
        Type: CODEPIPELINE

  CodeBuildRelease:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${ApplicationName}-Package-Release"
      Description: !Sub SAM package for ${ApplicationName}
      ServiceRole: !Ref CodeBuildReleaseRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: "cicd/package/release.yml"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: ARTIFACT_S3_BUCKET
            Value: !Sub ${CodePipelineArtifactS3Bucket}
          - Name: S3Bucket
            Value: !Ref ReleaseS3Bucket
          - Name: Template
            Value: template.yaml             
          - Name: Packaged
            Value: packaged.yaml        
          - Name: APP_NAME
            Value: !Sub "${ApplicationName}"
      Artifacts:
        Name: !Ref ApplicationName
        Type: CODEPIPELINE

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${ApplicationName}-CodePipeline-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal: 
            Service: [codepipeline.amazonaws.com] 
        Version: '2012-10-17'
      Path: /
      Policies: 
        - PolicyName: !Sub ${ApplicationName}-CodePipeline-${AWS::Region}
          PolicyDocument:                     
            Version: '2012-10-17'
            Statement: 
            - Action:
              - 'iam:PassRole'
              Effect: Allow
              Resource: '*'
            - Action:
              - 'codestar-connections:UseConnection'
              - 'codestar-connections:GetConnection'
              - 'codestar-connections:ListConnections'
              - 'codestar-connections:ListTagsForResource'
              Resource: !Sub arn:aws:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/*
              Effect: Allow
            - Action:
              - 'codebuild:BatchGetBuilds'
              - 'codebuild:StartBuild'
              Resource:
              - !Sub ${CodeBuildGo.Arn}
              - !Sub ${CodeBuildStaging.Arn}
              - !Sub ${CodeBuildRelease.Arn}
              Effect: Allow
            - Action:
              - 's3:GetBucketVersioning'
              - 's3:ListBucket'
              Resource:
              - !Sub ${CodePipelineArtifactS3Bucket.Arn}
              - !Sub ${StagingS3Bucket.Arn}
              - !Sub ${ReleaseS3Bucket.Arn}
              Effect: Allow
            - Action:
              -  's3:PutObject'
              -  's3:GetObject'
              -  's3:GetObjectVersion'
              Resource:
              - !Sub ${CodePipelineArtifactS3Bucket.Arn}/*
              - !Sub ${StagingS3Bucket.Arn}/*
              - !Sub ${ReleaseS3Bucket.Arn}/*
              Effect: Allow
            - Action:
              - 'codedeploy:CreateDeployment'
              - 'codedeploy:GetApplicationRevision'
              - 'codedeploy:GetDeployment'
              - 'codedeploy:GetDeploymentConfig'
              - 'codedeploy:RegisterApplicationRevision'
              Resource: '*'
              Effect: Allow
            - Action: 'lambda:InvokeFunction'
              Resource: !GetAtt SARPublishApp.Outputs.ServerlessRepoPublishFunctionArn
              Effect: Allow
            - Action:
              - 'cloudformation:CreateStack'
              - 'cloudformation:DeleteStack'
              - 'cloudformation:DescribeStacks'
              - 'cloudformation:UpdateStack'
              - 'cloudformation:CreateChangeSet'
              - 'cloudformation:DeleteChangeSet'
              - 'cloudformation:DescribeChangeSet'
              - 'cloudformation:ExecuteChangeSet'
              - 'cloudformation:SetStackPolicy'
              - 'cloudformation:ValidateTemplate'
              Resource: '*'
              Effect: Allow

  CodePipelineCloudFormationRole:
    Type: AWS::IAM::Role
    Properties: 
      Path: /
      RoleName: !Sub ${ApplicationName}-CloudFormation-${AWS::Region}
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Action": "sts:AssumeRole",
            "Effect": "Allow",
            "Principal": { 
              "Service": "cloudformation.amazonaws.com" 
            }
          }]
        }
      Policies: 
        - PolicyName: !Sub ${ApplicationName}-CloudFormation-${AWS::Region}
          PolicyDocument: |                    
            {
              "Statement": [{
                "Effect": "Allow",
                "Action": [ "*" ],
                "Resource": "*"
              }]
            }

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${ApplicationName}

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties: 
      Path: /
      RoleName: !Sub ${ApplicationName}-CodeDeploy-${AWS::Region}
      AssumeRolePolicyDocument: |
        {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": { 
                "Service": "codedeploy.amazonaws.com" 
              }
            }
          ]
        }
      Policies: 
        - PolicyName: !Sub ${AWS::StackName}-${AWS::Region}
          PolicyDocument: !Sub |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:CompleteLifecycleAction",
                    "autoscaling:DeleteLifecycleHook",
                    "autoscaling:DescribeAutoScalingGroups",
                    "autoscaling:DescribeLifecycleHooks",
                    "autoscaling:PutLifecycleHook",
                    "autoscaling:RecordLifecycleActionHeartbeat",
                    "ec2:DescribeInstances",
                    "ec2:DescribeInstanceStatus",
                    "tag:GetTags",
                    "tag:GetResources",
                    "sns:Publish",
                    "cloudwatch:DescribeAlarms"
                  ],
                  "Resource": "*"
                },
                { 
                  "Effect": "Allow",
                  "Action": "secretsmanager:GetSecretValue",
                  "Resource": "*"
                }
              ]
            }

  CodeBuildGoRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${ApplicationName}-CodeBuild-Go-${AWS::Region}
      AssumeRolePolicyDocument: |
        { 
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": { 
                "Service": "codebuild.amazonaws.com"
              }
            }
          ]
        }
      Policies:
        - PolicyName: !Sub ${ApplicationName}-CodeBuild-Go-${AWS::Region}
          PolicyDocument: !Sub |  
            {
              "Statement": [      
                {
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": "${CodePipelineArtifactS3Bucket.Arn}/*",
                  "Action": "s3:*"
                }
              ]
            }

  CodeBuildStagingRole:
    Type: AWS::IAM::Role
    Properties: 
      Path: /
      RoleName: !Sub ${ApplicationName}-CodeBuild-Staging-${AWS::Region}
      AssumeRolePolicyDocument: |
        {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": { 
                "Service": "codebuild.amazonaws.com" 
              }
            }
          ]
        }
      Policies: 
        - PolicyName: !Sub ${ApplicationName}-CodeBuild-Staging-${AWS::Region}
          PolicyDocument: !Sub |      
            {
              "Statement": [              
                {
                  "Effect": "Allow",
                  "Resource": [ "*" ],
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": [
                    "${CodePipelineArtifactS3Bucket.Arn}/*",
                    "${StagingS3Bucket.Arn}/*"
                  ],
                  "Action": "s3:*"
                }
              ]
            }

  CodeBuildReleaseRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${ApplicationName}-CodeBuild-Release-${AWS::Region}
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Action": "sts:AssumeRole",
            "Effect": "Allow",
            "Principal": {
              "Service": "codebuild.amazonaws.com"
            }
          }]
        }
      Policies:
        - PolicyName: !Sub ${ApplicationName}-CodeBuild-Release-${AWS::Region}
          PolicyDocument: !Sub |     
            {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": [ "*" ],
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:s3:::${CodePipelineArtifactS3Bucket}/*",
                    "arn:aws:s3:::${ReleaseS3Bucket}/*"
                  ],
                  "Action": "s3:*"
                }
              ]
            }

Outputs:

  CodePipelineURL:
    Description: The URL for the created pipeline
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${ApplicationName}      

  CodeDeployApplication:
    Description: The CodeDeploy application used across all environments
    Value: !Ref CodeDeployApplication
    Export:
      Name: !Sub CodeDeployApplication-${ApplicationName}

  CodeDeployServiceRoleArn:
    Description: The CodeDeploy service role used across all environments
    Value: !GetAtt CodeDeployServiceRole.Arn
    Export:
      Name: !Sub CodeDeployServiceRoleArn-${ApplicationName}

  CodePipelineArtifactS3BucketARN:
    Description: "S3 bucket ARN Codepipeline is using"
    Value: !GetAtt CodePipelineArtifactS3Bucket.Arn
    Export:
      Name: CodePipelineArtifactS3BucketARN
