AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: 
  This CloudFormation template will deploy a full CI/CD pipeline for SSO
  Sync. It includes building with AWS CodeBuild, publishing to a
  staging (private) AWS Serverless Application Repository (SAR), deployment
  of the beta into a staging environment via AWS CloudFormation. If the commit
  is also a release, then the app will also be published to the public SAR entry.

Parameters:
  ApplicationName: 
    Description: This will be used to name the pipeline and build resources
    Default: SSOSync
    Type: String
    AllowedPattern: '[A-Za-z0-9-]+'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          default: Application Configuration
        Parameters:
          - ApplicationName
      - Label:
          default: GitHub Configuration
        Parameters:
          - GitHubOAuthToken
            
    ParameterLabels:
      ApplicationName: 
        default: Application Name
      GitHubOAuthToken: 
        default: OAuth2 Token

Resources:
  CodePipelineServerlessRepoPublishApp:
    Type: AWS::Serverless::Application
    UpdateReplacePolicy: Delete
    Properties:
      Location:
        ApplicationId: 'arn:aws:serverlessrepo:us-east-1:077246666028:applications/aws-serverless-codepipeline-serverlessrepo-publish'
        SemanticVersion: 1.0.0

  CodePipelineArtifactS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete

  StagingS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete

  StagingS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StagingS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowSARObjectDownloads            
            Effect: Allow,
            Principal:
              Service: serverlessrepo.amazonaws.com
            Action: s3:GetObject
            Resource: !Join [ '', [ !GetAtt StagingS3Bucket.Arn, '/*' ] ]
            Condition: 
              StringEquals: 
                aws:SourceAccount": !Ref AWS::AccountId

  ReleaseS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete

  ReleaseS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ReleaseS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowSARObjectDownloads            
            Effect: Allow,
            Principal:
              Service: serverlessrepo.amazonaws.com
            Action: s3:GetObject
            Resource: !Join [ '', [ !GetAtt ReleaseS3Bucket.Arn, '/*' ] ]
            Condition: 
              StringEquals: 
                aws:SourceAccount": !Ref AWS::AccountId

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref ApplicationName
      RoleArn: !Sub ${CodePipelineRole.Arn}
      ArtifactStore: 
        Type: S3
        Location: !Ref CodePipelineArtifactS3Bucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              OutputArtifacts:
                - Name: 1-Source
              Configuration:
                ConnectionArn: arn:aws:codestar-connections:us-east-2:004480582608:connection/0a1c90d5-1395-4a3b-8734-2b53cda9fad2
                FullRepositoryId: awslabs/ssosync
                BranchName: CodePipeline
                DetectChanges: true
        - Name: BuildStaging
          Actions:
            - Name: BuildGo
              InputArtifacts:
                - Name: 1-Source
              ActionTypeId: 
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: 2-Build
              Configuration: 
                ProjectName: !Ref CodeBuildGo
        - Name: BuildStaging
          Actions:
            - Name: BuildGo
              InputArtifacts:
                - Name: 2-Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: 3-BuildStaging
              Configuration:
                ProjectName: !Ref CodeBuildStaging
        - Name: PublishBeta
          Actions:
            - Name: PublishBetaToSAR
              InputArtifacts:
                - Name: 2-BuildStaging
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: '1'
                Provider: Lambda
              Configuration:
                FunctionName: !GetAtt CodePipelineServerlessRepoPublishApp.Outputs.ServerlessRepoPublishFunctionName # Here we use the app output ServerlessRepoPublishFunctionName
        - Name: Approvals
          Actions:
            - Name: ProductionGate
              ActionTypeId: 
                Category: Approval
                Owner: AWS
                Version: 1
                Provider: Manual  

  CodeBuildGo:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: ${ApplicationName}
      Description: !Sub Build project for ${ApplicationName}
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: cicd/buildgo.yml
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: ARTIFACT_S3_BUCKET
            Value: !Sub ${CodePipelineArtifactS3Bucket}
      Artifacts:
        Name: !Ref ApplicationName
        Type: CODEPIPELINE

  CodeBuildStaging:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${ApplicationName}-Beta
      Description: !Sub SAM package for ${ApplicationName}-Beta
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: cicd/buildstaging.yml
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: ARTIFACT_S3_BUCKET
            Value: !Sub ${CodePipelineArtifactS3Bucket}
          - Name: S3Bucket
            Value: !Ref StagingS3Bucket
      Artifacts:
        Name: !Ref ApplicationName
        Type: CODEPIPELINE

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties: 
      Path: /
      RoleName: !Sub ${ApplicationName}-CodePipeline-${AWS::Region}
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Action": "sts:AssumeRole",
            "Effect": "Allow",
            "Principal": { 
              "Service": "codepipeline.amazonaws.com" 
            }
          }]
        }
      Policies: 
        - PolicyName: !Sub ${ApplicationName}-CodePipeline-${AWS::Region}
          PolicyDocument: !Sub |                    
            {
              "Statement": [
                {
                  "Action": [ "s3:GetBucketVersioning" ],
                  "Resource": [ "arn:aws:s3:::${CodePipelineArtifactS3Bucket}" ],
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "S3:GetObjectVersion"
                  ],
                  "Resource": [
                    "arn:aws:s3:::${CodePipelineArtifactS3Bucket}/*"
                  ],
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "codedeploy:CreateDeployment",
                    "codedeploy:GetApplicationRevision",
                    "codedeploy:GetDeployment",
                    "codedeploy:GetDeploymentConfig",
                    "codedeploy:RegisterApplicationRevision"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "cloudformation:CreateStack",
                    "cloudformation:DeleteStack",
                    "cloudformation:DescribeStacks",
                    "cloudformation:UpdateStack",
                    "cloudformation:CreateChangeSet",
                    "cloudformation:DeleteChangeSet",
                    "cloudformation:DescribeChangeSet",
                    "cloudformation:ExecuteChangeSet",
                    "cloudformation:SetStackPolicy",
                    "cloudformation:ValidateTemplate",
                    "iam:PassRole"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "codestar-connections:UseConnection",
                    "codestar-connections:GetConnection",
                    "codestar-connections:ListConnections",
                    "codestar-connections:ListTagsForResource"
                  ],
                  "Resource": "arn:aws:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "codebuild:BatchGetBuilds",
                    "codebuild:StartBuild"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }

  CodePipelineCloudFormationRole:
    Type: AWS::IAM::Role
    Properties: 
      Path: /
      RoleName: !Sub ${ApplicationName}-CloudFormation-${AWS::Region}
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Action": "sts:AssumeRole",
            "Effect": "Allow",
            "Principal": { 
              "Service": "cloudformation.amazonaws.com" 
            }
          }]
        }
      Policies: 
        - PolicyName: !Sub ${ApplicationName}-CloudFormation-${AWS::Region}
          PolicyDocument: !Sub |                    
            {
              "Statement": [{
                "Effect": "Allow",
                "Action": [ "*" ],
                "Resource": "*"
              }]
            }

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${ApplicationName}

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties: 
      Path: /
      RoleName: !Sub ${ApplicationName}-CodeDeploy-${AWS::Region}
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Action": "sts:AssumeRole",
            "Effect": "Allow",
            "Principal": { 
              "Service": "codedeploy.amazonaws.com" 
            }
          }]
        }
      Policies: 
        - PolicyName: !Sub ${AWS::StackName}-${AWS::Region}
          PolicyDocument: !Sub |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:CompleteLifecycleAction",
                    "autoscaling:DeleteLifecycleHook",
                    "autoscaling:DescribeAutoScalingGroups",
                    "autoscaling:DescribeLifecycleHooks",
                    "autoscaling:PutLifecycleHook",
                    "autoscaling:RecordLifecycleActionHeartbeat",
                    "ec2:DescribeInstances",
                    "ec2:DescribeInstanceStatus",
                    "tag:GetTags",
                    "tag:GetResources",
                    "sns:Publish",
                    "cloudwatch:DescribeAlarms"
                  ],
                  "Resource": "*"
                }
              ]
            }

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties: 
      Path: /
      RoleName: !Sub ${ApplicationName}-CodeBuild-${AWS::Region}
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Action": "sts:AssumeRole",
            "Effect": "Allow",
            "Principal": { 
              "Service": "codebuild.amazonaws.com" 
            }
          }]
        }
      Policies: 
        - PolicyName: !Sub ${ApplicationName}-CodeBuild-${AWS::Region}
          PolicyDocument: !Sub |      
            {
              "Statement": [              
                {
                  "Effect": "Allow",
                  "Resource": [ "*" ],
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:s3:::${CodePipelineArtifactS3Bucket}/*",
                    "arn:aws:s3:::${StagingS3Bucket}/*",
                    "arn:aws:s3:::${ReleaseS3Bucket}/*"
                  ],
                  "Action": [
                    "s3:GetObject",
                    "s3:GetObjectVersion",
                    "s3:PutObject"
                  ]
                }
              ]
            }

Outputs:

  CodePipelineURL:
    Description: The URL for the created pipeline
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${ApplicationName}      

  CodeDeployApplication:
    Description: The CodeDeploy application used across all environments
    Value: !Ref CodeDeployApplication
    Export:
      Name: !Sub CodeDeployApplication-${ApplicationName}

  CodeDeployServiceRoleArn:
    Description: The CodeDeploy service role used across all environments
    Value: !GetAtt CodeDeployServiceRole.Arn
    Export:
      Name: !Sub CodeDeployServiceRoleArn-${ApplicationName}

  CodePipelineArtifactS3BucketARN:
    Description: "S3 bucket ARN Codepipeline is using"
    Value: !GetAtt CodePipelineArtifactS3Bucket.Arn
    Export:
      Name: CodePipelineArtifactS3BucketARN
